name: Liquibase Docker Update and Tag

on:
  workflow_dispatch:
    inputs:
      app_env:
        description: 'Environment (e.g., dev)'
        default: 'dev'
        required: true
      spanner_instance:
        description: 'Spanner instance (e.g., demo)'
        default: 'demo'
        required: true
      app_version:
        description: 'Version tag (e.g., v1.0.0)'
        default: 'v1.0.0'
        required: true

env:
  CHANGE_LOG_FILE: sql/changelog-root.xml
  LIQUIBASE_IMAGE: liquibase:4.29.2
  SEARCH_PATH: /liquibase,/liquibase/sql

jobs:
  liquibase-update-tag:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Derive Liquibase Variables
        run: |
          echo "APP_NAME=demo-app" >> $GITHUB_ENV
          echo "APP_VERSION=${{ inputs.app_version }}" >> $GITHUB_ENV
          echo "COMMIT_ID=$(echo "${{ github.sha }}" | cut -c1-7)" >> $GITHUB_ENV
          echo "APP_ENV=${{ inputs.app_env }}" >> $GITHUB_ENV
          echo "JDBC_URL=jdbc:cloudspanner:/projects/${{ vars.GCP_PROJECT_ID }}/instances/${{ inputs.spanner_instance }}/databases/demo_liquibase" >> $GITHUB_ENV

      - name: GCP Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          export_environment_variables: true
          create_credentials_file: true

      - name: Copy Credentials to Workspace
        run: cp "$GOOGLE_APPLICATION_CREDENTIALS" "${{ github.workspace }}/gcp-creds.json"

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Maven
        run: sudo apt-get update && sudo apt-get install -y maven

      - name: Download Liquibase Spanner Extension
        run: |
          mkdir -p liquibase-lib
          mvn dependency:copy -Dartifact=com.google.cloudspannerecosystem:liquibase-spanner:4.20.0:jar -DoutputDirectory=liquibase-lib
          if [ -f "liquibase-lib/liquibase-spanner-4.20.0.jar" ]; then
            echo "Liquibase Spanner extension downloaded"
          else
            echo "ERROR: Liquibase Spanner extension not found"
            exit 1
          fi

      - name: Download Spanner JDBC Driver
        run: |
          mvn dependency:copy -Dartifact=com.google.cloud:google-cloud-spanner-jdbc:2.30.1:jar -DoutputDirectory=liquibase-lib
          if [ -f "liquibase-lib/google-cloud-spanner-jdbc-2.30.1.jar" ]; then
            echo "Spanner JDBC driver downloaded"
          else
            echo "ERROR: Spanner JDBC driver not found"
            exit 1
          fi

      - name: Configure Liquibase Properties
        run: |
          echo "liquibase.classpath=/liquibase/liquibase-lib/liquibase-spanner-4.20.0.jar:/liquibase/liquibase-lib/google-cloud-spanner-jdbc-2.30.1.jar" > liquibase.properties
          echo "liquibase.command.url=${{ env.JDBC_URL }}?credentials=/liquibase/gcp-creds.json;lenient=true" >> liquibase.properties
          echo "changeLogFile=${{ env.CHANGE_LOG_FILE }}" >> liquibase.properties
          echo "liquibase.searchPath=${{ env.SEARCH_PATH }}" >> liquibase.properties
          cat liquibase.properties

      - name: Debug Liquibase JAR Path
        run: |
          docker run --rm --entrypoint=/bin/sh ${{ env.LIQUIBASE_IMAGE }} -c "find / -name 'liquibase-core*.jar' 2>/dev/null; ls -l /app || true"

      - name: Check SQL Code Existence
        id: sql-check
        run: |
          if [ -f "${{ github.workspace }}/${{ env.CHANGE_LOG_FILE }}" ]; then
            echo "SQL_CODE_FOUND=true" >> "$GITHUB_ENV"
            echo "Changelog file found: ${{ env.CHANGE_LOG_FILE }}"
          else
            echo "SQL_CODE_FOUND=false" >> "$GITHUB_ENV"
            echo "No changelog file found: ${{ env.CHANGE_LOG_FILE }}"
            exit 1
          fi

      - name: Set Liquibase Run Flag
        id: liquibase-flag
        run: |
          if [[ "${{ env.APP_ENV }}" == "dev" ]]; then
            echo "SHOULD_RUN=true" >> "$GITHUB_ENV"
          else
            echo "SHOULD_RUN=false" >> "$GITHUB_ENV"
            echo "Skipping update: Unsupported environment"
            exit 1
          fi

      - name: Debug Container Files
        if: env.SHOULD_RUN == 'true' && env.SQL_CODE_FOUND == 'true'
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/liquibase" \
            --entrypoint=/bin/sh \
            ${{ env.LIQUIBASE_IMAGE }} \
            -c "ls -l /liquibase/liquibase-lib; cat /liquibase/liquibase.properties; ls -l /liquibase/gcp-creds.json; ls -l /liquibase/sql"
      
      - name: Check Liquibase Status
        id: liquibase-status
        if: env.SHOULD_RUN == 'true' && env.SQL_CODE_FOUND == 'true'
        run: |
          STATUS=$(docker run --rm \
            -v "${{ github.workspace }}:/liquibase" \
            -e GOOGLE_APPLICATION_CREDENTIALS=/liquibase/gcp-creds.json" \
            --entrypoint=/bin/sh \
            ${{ env.LIQUIBASE_IMAGE }} \
            -c "java -jar /app/liquibase-core.jar --defaultsFile=/liquibase/liquibase.properties --log-level=debug status --contexts='${{ env.APP_ENV }}' | grep -c 'is up to date'")
          echo "UPDATE_STATUS=$STATUS" >> "$GITHUB_ENV"
          echo "0" > "${{ github.workspace }}/liquibase-status.txt"
          cat "${{ github.workspace }}/liquibase-status.txt"

        continue-on-error: true

      - name: Run Liquibase Commands
        id: run-liquibase
        if: env.SHOULD_RUN == 'true' && env.SQL_CODE_FOUND == 'true' && env.UPDATED_STATUS != '1'
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/liquibase" \
            -e GOOGLE_APPLICATION_CREDENTIALS=/liquibase/gcp-creds.json \
            --entrypoint=/bin/sh \
            ${{ env.LIQUIBASE_IMAGE }} \
            -c "java -jar /app/liquibase-core.jar --defaultsFile=/liquibase/liquibase.properties --log-level=debug validate" || { echo "Liquibase validate failed"; exit 1; }
          docker run --rm \
            -v "${{ github.workspace }}:/liquibase" \
            -e GOOGLE_APPLICATION_CREDENTIALS=/liquibase/gcp-creds.json \
            --entrypoint=/bin/sh \
            ${{ env.LIQUIBASE_IMAGE }} \
            -c "java -jar /app/liquibase-core.jar --defaultsFile=/liquibase/liquibase.properties --log-level=debug tag '${{ env.APP_VERSION }}'" || { echo "Liquibase tag failed"; exit 1; }
          docker run --rm \
            -v "${{ github.workspace }}:/liquibase" \
            -e GOOGLE_APPLICATION_CREDENTIALS=/liquibase/gcp-creds.json \
            --entrypoint=/bin/sh \
            ${{ env.LIQUIBASE_IMAGE }} \
            -c "java -jar /app/liquibase-core.jar --defaultsFile=/liquibase/liquibase.properties --log-level=debug update --contexts='${{ env.APP_ENV }}' && echo \$? > /liquibase/liquibase-status.txt" || { echo "Liquibase update failed"; exit 1; }
          cat "${{ github.workspace }}/liquibase-status.txt"

      - name: Skip (Unsupported Env)
        if: env.SHOULD_RUN != 'true'
        run: |
          echo "Skipping update: Unsupported environment"

      - name: Skip (SQL Not Found)
        if: env.SQL_CODE_FOUND != 'true'
        run: |
          echo "Skipping update: No changelog found"

      - name: Skip (Already Up to Date)
        if: env.SHOULD_RUN == 'true' && env.UPDATE_STATUS == '1'
        run: |
          echo "Skipping update: Database is already up to date"