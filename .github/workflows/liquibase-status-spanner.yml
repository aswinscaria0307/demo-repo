name: Liquibase Status with Spanner

on:
  workflow_dispatch:
    inputs:
      app_env:
        description: 'Environment (dev, stage, prod-c)'
        default: 'dev'
        required: true
      spanner_instance:
        description: 'Spanner instance (e.g., demo, b2b-dev01)'
        default: 'demo'
        required: true

env:
  CHANGE_LOG_FILE: sql/changelog-root.xml
  JDBC_URL: jdbc:cloudspanner:/projects/${{ vars.GCP_PROJECT_ID }}/instances/${{ inputs.spanner_instance }}/databases/demo_liquibase?credentials=${{ github.workspace }}/sa-liquibase.json
  SEARCH_PATH: sql
  WORKSPACE: ${{ github.workspace }}

jobs:
  test-liquibase-status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Debug Environment
        run: |
          echo "Current working directory:"
          pwd
          echo "WORKSPACE: ${{ env.WORKSPACE }}"
          echo "Listing files in ${{ env.WORKSPACE }}:"
          ls -la ${{ env.WORKSPACE }}
          echo "Checking for pom.xml:"
          if [ -f "${{ env.WORKSPACE }}/pom.xml" ]; then
            echo "pom.xml found"
            cat ${{ env.WORKSPACE }}/pom.xml
          else
            echo "Error: pom.xml not found" >&2
            exit 1
          fi
          echo "Checking for ${{ env.CHANGE_LOG_FILE }}:"
          if [ -f "${{ env.WORKSPACE }}/${{ env.CHANGE_LOG_FILE }}" ]; then
            echo "${{ env.CHANGE_LOG_FILE }} found"
          else
            echo "Error: ${{ env.CHANGE_LOG_FILE }} not found" >&2
            exit 1
          fi
        shell: bash

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Clear Maven Cache
        run: rm -rf ~/.m2/repository
        shell: bash

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}-v8
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Debug Dependency Tree
        run: |
          mvn -B dependency:tree -X > mvn-tree.log 2>&1
          cat mvn-tree.log
          if grep -q "com.google.cloud:google-cloud-spanner-jdbc:jar:2.5.7" mvn-tree.log; then
            echo "google-cloud-spanner-jdbc:2.5.7 found in dependency tree"
          else
            echo "Error: google-cloud-spanner-jdbc:2.5.7 not found in dependency tree" >&2
            exit 1
          fi
        working-directory: ${{ env.WORKSPACE }}
        shell: bash

      - name: Resolve Dependencies
        run: |
          mvn -B dependency:resolve -U -X > mvn-resolve.log 2>&1
          cat mvn-resolve.log
          if [ $? -ne 0 ]; then
            echo "Error: Maven dependency resolution failed" >&2
            exit 1
          fi
        working-directory: ${{ env.WORKSPACE }}
        shell: bash

      - name: Copy Dependencies
        run: |
          rm -rf ${{ env.WORKSPACE }}/m2-repository ${{ env.WORKSPACE }}/target
          mkdir -p ${{ env.WORKSPACE }}/m2-repository
          echo "Running mvn command:"
          echo "mvn -B dependency:copy-dependencies -Dmdep.outputDirectory=${{ env.WORKSPACE }}/m2-repository -U -X"
          mvn -B dependency:copy-dependencies -Dmdep.outputDirectory=${{ env.WORKSPACE }}/m2-repository -U -X > mvn-copy.log 2>&1
          cat mvn-copy.log
          echo "Listing contents of target/dependency:"
          ls -la ${{ env.WORKSPACE }}/target/dependency || echo "No target/dependency directory"
          echo "Listing contents of m2-repository:"
          ls -la ${{ env.WORKSPACE }}/m2-repository
          # Fallback: Copy JARs from target/dependency to m2-repository if present
          if [ -d "${{ env.WORKSPACE }}/target/dependency" ]; then
            echo "Copying JARs from target/dependency to m2-repository"
            cp -v ${{ env.WORKSPACE }}/target/dependency/*.jar ${{ env.WORKSPACE }}/m2-repository/ || echo "No JARs to copy"
          fi
          echo "Listing contents of m2-repository after fallback copy:"
          ls -la ${{ env.WORKSPACE }}/m2-repository
          for jar in \
            "google-cloud-spanner-jdbc-2.5.7.jar" \
            "google-cloud-spanner-1.50.0.jar" \
            "guava-30.1.1-jre.jar" \
            "protobuf-java-3.25.5.jar" \
            "protobuf-java-util-3.25.5.jar"; do
            if [ -f "${{ env.WORKSPACE }}/m2-repository/$jar" ]; then
              echo "$jar found"
            else
              echo "Error: $jar not found in m2-repository" >&2
              exit 1
            fi
          done
        working-directory: ${{ env.WORKSPACE }}
        shell: bash

      - name: Save Service Account Key
        run: echo "${{ secrets.GCP_SA_KEY }}" > ${{ env.WORKSPACE }}/sa-liquibase.json
        shell: bash

      - name: Verify JAR Files
        run: |
          echo "Listing all JARs in m2-repository:"
          find ${{ env.WORKSPACE }}/m2-repository -type f -name "*.jar" -ls || echo "No JARs found in m2-repository"
        shell: bash

      - name: Check for Changelog File
        id: check_sql
        run: |
          if [ -f "${{ env.WORKSPACE }}/${{ env.CHANGE_LOG_FILE }}" ]; then
            echo "root_xml=true" >> $GITHUB_OUTPUT
          else
            echo "root_xml=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Run Liquibase Status
        id: liquibase_status
        if: steps.check_sql.outputs.root_xml == 'true'
        uses: liquibase-github-actions/status@v4.31.1
        with:
          changelogFile: ${{ env.CHANGE_LOG_FILE }}
          url: ${{ env.JDBC_URL }}
          driver: com.google.cloud.spanner.jdbc.JdbcDriver
          searchPath: ${{ env.SEARCH_PATH }}
          classpath: ${{ env.WORKSPACE }}/m2-repository/*.jar
          contextFilter: ${{ inputs.app_env }}
          logLevel: debug
        env:
          JAVA_HOME: /opt/java/openjdk
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.WORKSPACE }}/sa-liquibase.json

      - name: Output Results
        if: steps.check_sql.outputs.root_xml == 'true'
        run: |
          echo "Changesets:"
          echo "${{ steps.liquibase_status.outputs.changesets }}"
        shell: bash