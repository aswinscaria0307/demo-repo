name: Liquibase Docker Update and Tag

on:
  workflow_dispatch:
    inputs:
      app_env:
        description: 'Environment (dev)'
        default: 'dev'
        required: true
      spanner_instance:
        description: 'Spanner instance (e.g., demo)'
        default: 'demo'
        required: true
      app_version:
        description: 'Version tag (e.g., v1.0.0)'
        default: 'v1.0.0'
        required: true

env:
  CHANGE_LOG_FILE: sql/changelog-root.xml
  JDBC_URL: jdbc:cloudspanner:/projects/${{ vars.GCP_PROJECT_ID }}/instances/${{ inputs.spanner_instance }}/databases/demo_liquibase
  SEARCH_PATH: /liquibase,/liquibase/sql
  LIQUIBASE_IMAGE: liquibase:4.29.2  

jobs:
  liquibase-update-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Derive Liquibase Variables
        id: derive-liquibase-variables
        run: |
          APP_NAME="demo-app"
          APP_VERSION="${{ inputs.app_version }}"
          COMMIT_ID=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "COMMIT_ID=$COMMIT_ID" >> $GITHUB_ENV
          echo "APP_ENV=${{ inputs.app_env }}" >> $GITHUB_ENV
        shell: bash

      - name: GCP Authentication
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          export_environment_variables: true
          create_credentials_file: true

      - name: Copy Credentials to Workspace
        run: cp "$GOOGLE_APPLICATION_CREDENTIALS" "${{ github.workspace }}/gcp-creds.json"
        shell: bash

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Maven
        run: sudo apt-get update && sudo apt-get install -y maven

      - name: Download Liquibase Spanner Extension
        run: |
          mkdir -p "${{ github.workspace }}/liquibase-lib"
          mvn dependency:copy -Dartifact=com.google.cloudspannerecosystem:liquibase-spanner:4.20.0:jar \
            -DoutputDirectory="${{ github.workspace }}/liquibase-lib"
          ls -l "${{ github.workspace }}/liquibase-lib"
          if [ -f "${{ github.workspace }}/liquibase-lib/liquibase-spanner-4.20.0.jar" ]; then
            echo "Liquibase Spanner extension found"
          else
            echo "ERROR: Liquibase Spanner extension not found"
            exit 1
          fi
        shell: bash

      - name: Download Spanner JDBC Driver
        run: |
          mvn dependency:copy -Dartifact=com.google.cloud:google-cloud-spanner-jdbc:2.30.1:jar \
            -DoutputDirectory="${{ github.workspace }}/liquibase-lib"
          ls -l "${{ github.workspace }}/liquibase-lib"
          if [ -f "${{ github.workspace }}/liquibase-lib/google-cloud-spanner-jdbc-2.30.1.jar" ]; then
            echo "Spanner JDBC driver found"
            unzip -l "${{ github.workspace }}/liquibase-lib/google-cloud-spanner-jdbc-2.30.1.jar" | grep com/google/cloud/spanner/jdbc/JdbcDriver || echo "ERROR: Driver not found in JAR"
          else
            echo "ERROR: Spanner JDBC driver not found"
            exit 1
          fi
        shell: bash

      - name: Configure Liquibase Properties
        run: |
          echo "liquibase.defaultSchemaName=" > "${{ github.workspace }}/liquibase.properties"
          echo "liquibase.classpath=/liquibase/liquibase-lib/liquibase-spanner-4.20.0.jar:/liquibase/liquibase-lib/google-cloud-spanner-jdbc-2.30.1.jar" >> "${{ github.workspace }}/liquibase.properties"
          echo "liquibase.command.url=${{ env.JDBC_URL }}?credentials=/liquibase/gcp-creds.json;lenient=true" >> "${{ github.workspace }}/liquibase.properties"
          echo "changeLogFile=${{ env.CHANGE_LOG_FILE }}" >> "${{ github.workspace }}/liquibase.properties"
          echo "liquibase.searchPath=${{ env.SEARCH_PATH }}" >> "${{ github.workspace }}/liquibase.properties"
          cat "${{ github.workspace }}/liquibase.properties"
        shell: bash

      - name: Check SQL Code Existence
        id: sql-code-check
        run: |
          if [ -f "${{ github.workspace }}/${{ env.CHANGE_LOG_FILE }}" ]; then
            echo "SQL_CODE_STATUS=1" >> $GITHUB_ENV
            echo "Changelog file found: ${{ env.CHANGE_LOG_FILE }}"
          else
            echo "SQL_CODE_STATUS=0" >> $GITHUB_ENV
            echo "No changelog file found: ${{ env.CHANGE_LOG_FILE }}"
          fi
        shell: bash

      - name: Set Liquibase Properties
        id: set-liquibase-properties
        run: |
          if [[ "${{ env.APP_ENV }}" == "dev" ]]; then
            echo "LIQUIBASE_PROPERTIES=liquibase.properties" >> $GITHUB_ENV
            echo "SHOULD_RUN=true" >> $GITHUB_ENV
          else
            echo "SHOULD_RUN=false" >> $GITHUB_ENV
            echo "Skipping Liquibase update for unsupported environment: ${{ env.APP_ENV }}"
          fi
        shell: bash

      - name: Debug Container Files
        if: env.SHOULD_RUN == 'true' && env.SQL_CODE_STATUS != '0'
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/liquibase" \
            --entrypoint=/bin/sh \
            ${{ env.LIQUIBASE_IMAGE }} \
            -c "bash -c 'ls -l /liquibase/liquibase-lib; cat /liquibase/liquibase.properties; ls -l /liquibase/gcp-creds.json; ls -l /liquibase/sql'"
        shell: bash

      - name: Debug Liquibase Script
        run: |
          docker run --rm --entrypoint=/bin/sh ${{ env.LIQUIBASE_IMAGE }} -c "head -n 1 /liquibase/liquibase; cat /liquibase/liquibase; ls -l /bin/sh; ls -l /bin/bash || true"
        shell: bash

      - name: Check Liquibase Status
        id: liquibase-status
        if: env.SHOULD_RUN == 'true' && env.SQL_CODE_STATUS != '0'
        run: |
          UPDATE_STATUS=$(docker run --rm \
            -v "${{ github.workspace }}:/liquibase" \
            -e GOOGLE_APPLICATION_CREDENTIALS=/liquibase/gcp-creds.json \
            --entrypoint=/bin/sh \
            ${{ env.LIQUIBASE_IMAGE }} \
            -c "java -jar /liquibase/lib/liquibase-core.jar --defaultsFile=/liquibase/${{ env.LIQUIBASE_PROPERTIES }} status --contexts='${{ env.APP_ENV }}' | grep 'is up to date' | wc -l")
          echo "UPDATE_STATUS=$UPDATE_STATUS" >> $GITHUB_ENV
          echo "0" > "${{ github.workspace }}/liquibase-status.txt"
          cat "${{ github.workspace }}/liquibase-status.txt"
        shell: bash
        continue-on-error: true

      - name: Run Liquibase Commands
        id: run-liquibase-commands
        if: env.SHOULD_RUN == 'true' && env.SQL_CODE_STATUS != '0' && env.UPDATE_STATUS != '1'
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/liquibase" \
            -e GOOGLE_APPLICATION_CREDENTIALS=/liquibase/gcp-creds.json \
            --entrypoint=/bin/sh \
            ${{ env.LIQUIBASE_IMAGE }} \
            -c "java -jar /liquibase/lib/liquibase-core.jar --defaultsFile=/liquibase/${{ env.LIQUIBASE_PROPERTIES }} validate" || { echo "Liquibase validate failed"; exit 1; }
          docker run --rm \
            -v "${{ github.workspace }}:/liquibase" \
            -e GOOGLE_APPLICATION_CREDENTIALS=/liquibase/gcp-creds.json \
            --entrypoint=/bin/sh \
            ${{ env.LIQUIBASE_IMAGE }} \
            -c "java -jar /liquibase/lib/liquibase-core.jar --defaultsFile=/liquibase/${{ env.LIQUIBASE_PROPERTIES }} tag '${{ env.APP_VERSION }}'" || { echo "Liquibase tag failed"; exit 1; }
          docker run --rm \
            -v "${{ github.workspace }}:/liquibase" \
            -e GOOGLE_APPLICATION_CREDENTIALS=/liquibase/gcp-creds.json \
            --entrypoint=/bin/sh \
            ${{ env.LIQUIBASE_IMAGE }} \
            -c "java -jar /liquibase/lib/liquibase-core.jar --defaultsFile=/liquibase/${{ env.LIQUIBASE_PROPERTIES }} update --contexts='${{ env.APP_ENV }}' && echo \$? > /liquibase/liquibase-status.txt" || { echo "Liquibase update failed"; exit 1; }
          cat "${{ github.workspace }}/liquibase-status.txt"
        shell: bash

      - name: Skip Liquibase Update (Unsupported Environment)
        if: env.SHOULD_RUN != 'true'
        run: echo "SKIPPING Liquibase update for APP_ENV=${{ env.APP_ENV }}"
        shell: bash

      - name: Skip Liquibase Update (Up to Date)
        if: env.SHOULD_RUN == 'true' && env.UPDATE_STATUS == '1'
        run: echo "Database is up to date, no Liquibase update needed"
        shell: bash

      - name: Skip Liquibase Update (No SQL Code)
        if: env.SHOULD_RUN == 'true' && env.SQL_CODE_STATUS == '0'
        run: echo "No SQL code found, skipping Liquibase update"
        shell: bash