name: Liquibase Docker Update and Tag

on:
  workflow_dispatch:
    inputs:
      app_env:
        description: 'Environment (e.g., dev)'
        default: 'dev'
        required: true
      spanner_instance:
        description: 'Spanner instance (e.g., demo)'
        default: 'demo'
        required: true
      app_version:
        description: 'Version tag (e.g., v1.0.0)'
        default: 'v1.0.0'
        required: true

env:
  CHANGE_LOG_FILE: sql/changelog-root.xml
  LIQUIBASE_IMAGE: liquibase:4.29.0
  SEARCH_PATH: /liquibase/workspace,/liquibase/workspace/sql
  LIQUIBASE_CONFIG: liquibase.properties

jobs:
  liquibase-spanner-update:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    permissions:
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Derive Liquibase Variables
        run: |
          echo "APP_NAME=demo-app" >> "$GITHUB_ENV"
          echo "APP_VERSION=${{ inputs.app_version }}" >> "$GITHUB_ENV"
          echo "COMMIT_ID=$(echo "${{ github.sha }}" | cut -c1-7)" >> "$GITHUB_ENV"
          echo "APP_ENV=${{ inputs.app_env }}" >> "$GITHUB_ENV"
          echo "JDBC_URL=jdbc:cloudspanner:/projects/${{ vars.GCP_PROJECT_ID }}/instances/${{ inputs.spanner_instance }}/databases/demo_liquibase_spanner" >> "$GITHUB_ENV"

      - name: GCP Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          export_environment_variables: true
          create_credentials_file: true

      - name: Copy Credentials
        run: cp "$GOOGLE_APPLICATION_CREDENTIALS" "${{ github.workspace }}/gcp-creds.json"

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Maven
        run: sudo apt-get update && sudo apt-get install -y maven

      - name: Create Temporary POM for Dependencies
        run: |
          cat <<EOF > pom.xml
          <?xml version="1.0" encoding="UTF-8"?>
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
              <modelVersion>4.0.0</modelVersion>
              <groupId>com.example</groupId>
              <artifactId>liquibase-spanner</artifactId>
              <version>1.0-SNAPSHOT</version>
              <dependencyManagement>
                  <dependencies>
                      <dependency>
                          <groupId>com.google.api</groupId>
                          <artifactId>gax</artifactId>
                          <version>2.67.0</version>
                      </dependency>
                      <dependency>
                          <groupId>com.google.api</groupId>
                          <artifactId>gax-grpc</artifactId>
                          <version>2.67.0</version>
                      </dependency>
                      <dependency>
                          <groupId>com.google.api</groupId>
                          <artifactId>gax-httpjson</artifactId>
                          <version>2.67.0</version>
                      </dependency>
                      <dependency>
                          <groupId>com.google.cloud</groupId>
                          <artifactId>google-cloud-spanner</artifactId>
                          <version>6.93.0</version>
                      </dependency>
                  </dependencies>
              </dependencyManagement>
              <dependencies>
                  <dependency>
                      <groupId>com.google.cloud</groupId>
                      <artifactId>google-cloud-spanner-jdbc</artifactId>
                      <version>2.30.1</version>
                  </dependency>
                  <dependency>
                      <groupId>com.google.cloudspannerecosystem</groupId>
                      <artifactId>liquibase-spanner</artifactId>
                      <version>4.20.0</version>
                  </dependency>
              </dependencies>
          </project>
          EOF

      - name: Download Dependencies
        run: |
          mkdir -p liquibase-lib
          mvn dependency:copy-dependencies -DoutputDirectory=liquibase-lib
          ls -l liquibase-lib

      - name: Configure Liquibase Properties
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/liquibase/workspace" \
            --entrypoint=/bin/sh \
            ${{ env.LIQUIBASE_IMAGE }} \
            -c "CLASSPATH='/liquibase/internal/lib/liquibase-core.jar'; \
                for jar in /liquibase/workspace/liquibase-lib/*.jar; do \
                  [ -f \"\$jar\" ] && CLASSPATH=\"\$CLASSPATH:\$jar\"; \
                done; \
                echo \"classpath=\$CLASSPATH\" > /liquibase/workspace/${{ env.LIQUIBASE_CONFIG }}; \
                echo 'driver=com.google.cloud.spanner.jdbc.JdbcDriver' >> /liquibase/workspace/${{ env.LIQUIBASE_CONFIG }}; \
                echo 'url=${{ env.JDBC_URL }}?credentials=/liquibase/workspace/gcp-creds.json;lenient=true' >> /liquibase/workspace/${{ env.LIQUIBASE_CONFIG }}; \
                echo 'changeLogFile=${{ env.CHANGE_LOG_FILE }}' >> /liquibase/workspace/${{ env.LIQUIBASE_CONFIG }}; \
                echo 'searchPath=${{ env.SEARCH_PATH }}' >> /liquibase/workspace/${{ env.LIQUIBASE_CONFIG }}; \
                cat /liquibase/workspace/${{ env.LIQUIBASE_CONFIG }}"
          cat "${{ github.workspace }}/${{ env.LIQUIBASE_CONFIG }}"

      - name: Debug Liquibase JAR Path
        run: |
          docker run --rm --entrypoint=/bin/sh ${{ env.LIQUIBASE_IMAGE }} -c "find / -name 'liquibase-core*.jar' 2>/dev/null; ls -l /liquibase/internal/lib; java -version; whoami"

      - name: Debug Dependency Versions
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/liquibase/workspace" \
            --entrypoint=/bin/sh \
            ${{ env.LIQUIBASE_IMAGE }} \
            -c "ls -l /liquibase/workspace/liquibase-lib | grep -E 'gax-|google-cloud-spanner'; echo 'Classpath contents:'; cat /liquibase/workspace/${{ env.LIQUIBASE_CONFIG }}"

      - name: Check SQL Code Existence
        id: sql-check
        run: |
          if [ -f "${{ github.workspace }}/${{ env.CHANGE_LOG_FILE }}" ]; then
            echo "SQL_CODE_FOUND=true" >> "$GITHUB_ENV"
            echo "Changelog file found: ${{ env.CHANGE_LOG_FILE }}"
          else
            echo "SQL_CODE_FOUND=false" >> "$GITHUB_ENV"
            echo "No changelog file found: ${{ env.CHANGE_LOG_FILE }}"
            exit 1
          fi

      - name: Set Liquibase Run Flag
        id: liquibase-flag
        run: |
          if [[ "${{ env.APP_ENV }}" == "dev" ]]; then
            echo "SHOULD_RUN=true" >> "$GITHUB_ENV"
          else
            echo "SHOULD_RUN=false" >> "$GITHUB_ENV"
            echo "Skipping update: Unsupported environment"
            exit 1
          fi

      - name: Debug Container Files
        if: env.SQL_CODE_FOUND == 'true'
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/liquibase/workspace" \
            --entrypoint=/bin/sh \
            ${{ env.LIQUIBASE_IMAGE }} \
            -c "ls -l /liquibase/workspace/liquibase-lib; cat /liquibase/workspace/${{ env.LIQUIBASE_CONFIG }}; ls -l /liquibase/workspace/gcp-creds.json; ls -l /liquibase/workspace/sql; ls -l /liquibase/internal/lib/liquibase-core.jar || true"

      - name: Check Liquibase Status
        id: liquibase-status
        if: env.SHOULD_RUN == 'true' && env.SQL_CODE_FOUND == 'true'
        run: |
          STATUS=$(docker run --rm \
            -v "${{ github.workspace }}:/liquibase/workspace" \
            -e GOOGLE_APPLICATION_CREDENTIALS=/liquibase/workspace/gcp-creds.json \
            ${{ env.LIQUIBASE_IMAGE }} \
            status --defaultsFile=/liquibase/workspace/${{ env.LIQUIBASE_CONFIG }} --log-level=debug --contexts=${{ env.APP_ENV }} | grep -c 'is up to date')
          echo "UPDATE_STATUS=$STATUS" >> "$GITHUB_ENV"
          echo "0" > "${{ github.workspace }}/liquibase-status.txt"
          cat "${{ github.workspace }}/liquibase-status.txt"
        continue-on-error: true

      - name: Run Liquibase Commands
        id: run-liquibase
        if: env.SHOULD_RUN == 'true' && env.SQL_CODE_FOUND == 'true'
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/liquibase/workspace" \
            -e GOOGLE_APPLICATION_CREDENTIALS=/liquibase/workspace/gcp-creds.json \
            ${{ env.LIQUIBASE_IMAGE }} \
            validate --defaultsFile=/liquibase/workspace/${{ env.LIQUIBASE_CONFIG }} --log-level=debug || { echo "Liquibase validate failed"; exit 1; }
          docker run --rm \
            -v "${{ github.workspace }}:/liquibase/workspace" \
            -e GOOGLE_APPLICATION_CREDENTIALS=/liquibase/workspace/gcp-creds.json \
            ${{ env.LIQUIBASE_IMAGE }} \
            tag --defaultsFile=/liquibase/workspace/${{ env.LIQUIBASE_CONFIG }} --log-level=debug "${{ env.APP_VERSION }}" || { echo "Liquibase tag failed"; exit 1; }
          docker run --rm \
            -v "${{ github.workspace }}:/liquibase/workspace" \
            -e GOOGLE_APPLICATION_CREDENTIALS=/liquibase/workspace/gcp-creds.json \
            ${{ env.LIQUIBASE_IMAGE }} \
            update --defaultsFile=/liquibase/workspace/${{ env.LIQUIBASE_CONFIG }} --log-level=debug --contexts=${{ env.APP_ENV }} && echo $? > "${{ github.workspace }}/liquibase-status.txt" || { echo "Liquibase update failed"; exit 1; }
          cat "${{ github.workspace }}/liquibase-status.txt"


      - name: Skip (Unsupported Env)
        if: env.SHOULD_RUN != 'true'
        run: |
          echo "Skipping update: Unsupported environment"

      - name: Skip (SQL Not Found)
        if: env.SQL_CODE_FOUND != 'true'
        run: |
          echo "Skipping update: No changelog found"

      - name: Skip (Already Up to Date)
        if: env.SHOULD_RUN == 'true' && env.UPDATE_STATUS == '1'
        run: |
          echo "Skipping update: Database is already up to date"